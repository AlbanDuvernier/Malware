// Projet malware.cpp : définit le point d'entrée pour l'application console.
//


#include "stdafx.h"
#include <stdlib.h>
#include "stdio.h"
#include "string.h"
#include "math.h"
#include <Windows.h>
#include <Wincrypt.h>




int checker(char input[],char check[]);

int checker(char input[],char check[])
{
    int i,result=1;
    for(i=0; input[i]!='\0' || check[i]!='\0'; i++) {
        if(input[i] != check[i]) {
            result=0;
            break;
        }
    }
    return result;
}

char* printHash(BYTE* pHash, DWORD dwHashLen)
{
  static char szHash[33];
  memset(szHash, 0, 33);

  for (DWORD i = 0; i < dwHashLen; i++)
  {
    sprintf(szHash + (i * 2), "%02x", pHash[i]);
  }

  return szHash;
}

//déclaration du type des fonctions de type printf
typedef int (*type_printf) (const char *, ...);
typedef int (*type_scanf) (const char *, ...);
typedef int (*type_checker) (const char * , ...);

char debut_printf[] = {'\x6a', '\x0c', '\x68', '\x60', '\x57', '\xb0', '\x78', '\xe8', '\xc0', '\xb5', '\xfa', '\xff'};
char debut_scanf[] = {'\x8b', '\xff', '\x55', '\x8b', '\xec', '\x8d', '\x45', '\x0c', '\x50', '\x6a', '\x00', '\xff'};
char debut_checker[] = {'\x55', '\x8b', '\xec', '\x8b', '\x4d', '\x0c', '\x56', '\x8b', '\x75', '\x08', '\xb8', '\x01'};

int _tmain(int argc, _TCHAR* argv[])
{

	//trouver les 12 premiers octets de printf
	char *s = (char *) scanf; //printf un pointeur de function => besoin de convertir
	for(int x = 0 ; x < 12;  x++) printf("'\\x%02x', ", s[x] & 0xff); //=> 6a c 68 60 57 b0 78 e8 c0 b5 fa ff 33

	type_printf __;
	type_checker ___;
	type_scanf ____;

	unsigned int pos_scanf = (unsigned int) scanf;
	unsigned int pos_checker = (unsigned int) checker;
	printf("%d\n", pos_scanf - pos_checker);
	printf("%x\n", pos_scanf);
	
	char *p = (char *) scanf;
	int found = 0;
	while( !found) {
		if (memcmp(p, & debut_printf, 12) == 0) {
			found = 1;
		}
		else { p-- ; }
	}
	__ = (type_printf) p;
//_______________________________________________________________________________________________________________

	
	___= (type_checker) (pos_scanf - 2020625252);
	/*found = 0;
	while( !found) {
		if (memcmp(p, & debut_checker, 12) == 0) {
			found = 1;
		}
		else { p-- ; }
	}
	___ = (type_checker) p;*/

	char input[] ="a618df803d5516a578d3407e7556241e";
	__("%s\n", input);

	HCRYPTPROV hProv = 0;
	HCRYPTHASH hHash = 0;
	BYTE* pHashData = 0;
	DWORD dwDataLen = 0;
	char szData[40];
	int i=0;
	__("Trouver le mot caché.\n");
	scanf("%s",szData);
	DWORD dwHashLen = 0;
	if (!CryptAcquireContext(&hProv, NULL, NULL, PROV_RSA_FULL, 0))
	{
		__("CryptAcquireContext a échoué.\n");
		return 1;
	}

	if (!CryptCreateHash(hProv, CALG_MD5, 0, 0, &hHash))
	{
		__("CryptCreateHash a échoué.\n");
		return 1;
	}

	dwDataLen = strlen(szData) + 1;
	if (!CryptHashData(hHash, (BYTE*)szData, dwDataLen, 0))
	{
		__("CryptHashData a échoué.\n");
		return 1;
	}

	if (!CryptGetHashParam(hHash, HP_HASHVAL, NULL, &dwHashLen, 0))
	{
		__("CryptGetHashParam a échoué.\n");
		return 1;
	}

	pHashData = (BYTE*)malloc(dwHashLen);
	if (!CryptGetHashParam(hHash, HP_HASHVAL, pHashData, &dwHashLen, 0))
	{
		__("CryptGetHashParam a échoué.\n");
		return 1;
	}

	__("MD5 hash: %s\n", printHash(pHashData, dwHashLen));

	  

	while (!___(input,printHash(pHashData, dwHashLen)))
	{
		CryptDestroyHash(hHash);
		CryptReleaseContext(hProv, 0);
		free(pHashData);
        __("reesayer!\n");
        scanf("%s",szData);
		if (!CryptAcquireContext(&hProv, NULL, NULL, PROV_RSA_FULL, 0))
		{
			printf("CryptAcquireContext a échoué.\n");
			return 1;
		}

		if (!CryptCreateHash(hProv, CALG_MD5, 0, 0, &hHash))
		{
			printf("CryptCreateHash a échoué.\n");
			return 1;
		}

		dwDataLen = strlen(szData) + 1;
		if (!CryptHashData(hHash, (BYTE*)szData, dwDataLen, 0))
		{
			printf("CryptHashData a échoué.\n");
			return 1;
		}

		if (!CryptGetHashParam(hHash, HP_HASHVAL, NULL, &dwHashLen, 0))
		{
			printf("CryptGetHashParam a échoué.\n");
			return 1;
		}

		pHashData = (BYTE*)malloc(dwHashLen);
		if (!CryptGetHashParam(hHash, HP_HASHVAL, pHashData, &dwHashLen, 0))
		{
			printf("CryptGetHashParam a échoué.\n");
			return 1;
		}

		__("MD5 hash: %s\n", printHash(pHashData, dwHashLen));

	  
    }

    printf("Tu a gagné!!! bravo!!!");
	  
  


	while(1);
    return 0;
}
