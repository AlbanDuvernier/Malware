#include "stdafx.h"
#include <stdlib.h>
#include "stdio.h"
#include "string.h"
#include "math.h"
#include <Windows.h>
#include <Wincrypt.h>
/*#include "unistd.h"
#include "crypt.h"*/



int checker(char input[],char check[]);

int checker(char input[],char check[])
{
    int i,result=1;
    for(i=0; input[i]!='\0' || check[i]!='\0'; i++) {
        if(input[i] != check[i]) {
            result=0;
            break;
        }
    }
    return result;
}

char* printHash(BYTE* pHash, DWORD dwHashLen)
{
  static char szHash[33];
  memset(szHash, 0, 33);

  for (DWORD i = 0; i < dwHashLen; i++)
  {
    sprintf(szHash + (i * 2), "%02x", pHash[i]);
  }

  return szHash;
}


int _tmain(int argc, _TCHAR* argv[])
{

	  char input[] ="a618df803d5516a578d3407e7556241e";
	  printf("%s\n", input);

	  HCRYPTPROV hProv = 0;
	  HCRYPTHASH hHash = 0;
	  BYTE* pHashData = 0;
	  DWORD dwDataLen = 0;
	  char szData[40];
	  int i=0;
	  printf("Trouver le mot caché.\n");
	  scanf("%s",szData);
	  //char szData[] = "secret";
	  DWORD dwHashLen = 0;
	  if (!CryptAcquireContext(&hProv, NULL, NULL, PROV_RSA_FULL, 0))
	  {
		printf("CryptAcquireContext a échoué.\n");
		return 1;
	  }

	  if (!CryptCreateHash(hProv, CALG_MD5, 0, 0, &hHash))
	  {
		printf("CryptCreateHash a échoué.\n");
		return 1;
	  }

	  dwDataLen = strlen(szData) + 1;
	  if (!CryptHashData(hHash, (BYTE*)szData, dwDataLen, 0))
	  {
		printf("CryptHashData a échoué.\n");
		return 1;
	  }

	  if (!CryptGetHashParam(hHash, HP_HASHVAL, NULL, &dwHashLen, 0))
	  {
		printf("CryptGetHashParam a échoué.\n");
		return 1;
	  }

	  pHashData = (BYTE*)malloc(dwHashLen);
	  if (!CryptGetHashParam(hHash, HP_HASHVAL, pHashData, &dwHashLen, 0))
	  {
		printf("CryptGetHashParam a échoué.\n");
		return 1;
	  }

	  printf("MD5 hash: %s\n", printHash(pHashData, dwHashLen));

	  

	while (!checker(input,printHash(pHashData, dwHashLen)))
	{
		CryptDestroyHash(hHash);
		CryptReleaseContext(hProv, 0);
		free(pHashData);
        printf("reesayer!\n");
        scanf("%s",szData);
		if (!CryptAcquireContext(&hProv, NULL, NULL, PROV_RSA_FULL, 0))
	  {
		printf("CryptAcquireContext a échoué.\n");
		return 1;
	  }

	  if (!CryptCreateHash(hProv, CALG_MD5, 0, 0, &hHash))
	  {
		printf("CryptCreateHash a échoué.\n");
		return 1;
	  }

	  dwDataLen = strlen(szData) + 1;
	  if (!CryptHashData(hHash, (BYTE*)szData, dwDataLen, 0))
	  {
		printf("CryptHashData a échoué.\n");
		return 1;
	  }

	  if (!CryptGetHashParam(hHash, HP_HASHVAL, NULL, &dwHashLen, 0))
	  {
		printf("CryptGetHashParam a échoué.\n");
		return 1;
	  }

	  pHashData = (BYTE*)malloc(dwHashLen);
	  if (!CryptGetHashParam(hHash, HP_HASHVAL, pHashData, &dwHashLen, 0))
	  {
		printf("CryptGetHashParam a échoué.\n");
		return 1;
	  }

	  printf("MD5 hash: %s\n", printHash(pHashData, dwHashLen));

	  
    }

    printf("Tu a gagné!!! bravo!!!");
	  
  

	


	/*char input[]= "secret";
    char check[40];
    int i=0;
    printf("Trouver le mot caché.\n");
    scanf("%s",check);

    while (!checker(input,check))
    {
        printf("reesayer!\n");
        scanf("%s",check);
    }

    printf("Tu a gagné!!! bravo!!!");*/
	while(1);
    return 0;
}
